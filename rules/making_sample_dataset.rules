include:
    "logging.rules"

import sys
import pandas
import re
import logging

if "link_directory" in config.keys():
    link_directory = config["link_directory"]
    if not link_directory.endswith("/"):
        link_directory = link_directory + "/"
else:
    link_directory = "links/"

sras_ext = {}
reads_sra = {}

reads_local = {}

all_samples=pandas.DataFrame()

if "local_samples" not in config.keys() and "sra_samples" not in config.keys():
    raise ValueError("No samples defined in the config file")

if "local_samples" in config.keys():
    local_data = pandas.read_csv(config["local_samples"], sep="\t", index_col='SampleName')
    local_data.index = [str(x).replace(' ','') for x in local_data.index]
    all_local_sample_names =  "".join(list(local_data.index))
    if "(" in all_local_sample_names or ")" in all_local_sample_names or "_-_" in all_local_sample_names:
        raise ValueError("Forbidden character in sample name in sample name file")

    # setup read_naming dictionnatry and check that sample names are unique
    if not "R1" in local_data.columns.values:
        raise IOError('Missing R1 column in sample table.')
    for sample_name, sample_data in local_data.iterrows():
        if sample_name in reads_local:
            raise IOError("Identical sample name used multiple times: %s" % sample_name)
        reads_local[sample_name] =[sample_data.loc["R1"]]
        if 'R2' in local_data.columns.values:
            if "R1" in sample_data.loc["R2"]:
                raise IOError("ATTENTION! R1 flag within R2 filename: %s", sample_data.loc["R2"])
            reads_local[sample_name].append(sample_data.loc["R2"])
    all_samples = local_data

if "sra_samples" in config.keys():
    sra_data = pandas.read_csv(config["sra_samples"], sep="\t", index_col=0).drop_duplicates()
    if 'use_library_name' not in config.keys():
        all_sra_sample_names = "".join([str(i) for i in list(sra_data["SampleName"])])
    else:
        all_sra_sample_names = "".join(list([str(x) for x in sra_data["LibraryName"]]))
    if "(" in all_sra_sample_names or ")" in all_sra_sample_names or "_-_" in all_sra_sample_names:
        raise ValueError("Forbidden character in sample name in sra file")
    for i in sra_data.index:
        if "size_MB" in list(sra_data):
            if sra_data.loc[i, "size_MB"] < 20: #do not include samples with low amount of data
                continue
        if 'use_library_name' not in config.keys():
            sample_name = str(sra_data.loc[i, "SampleName"]).replace(" ", "_").replace("&", "and").replace(":", "-")
        else:
            sample_name = str(sra_data.loc[i, "LibraryName"]).replace(" ", "_").replace("&", "and").replace(":", "-")
        if sample_name in reads_sra.keys(): # if the sample name is already used, add _(n+1) at the end
            sample_name = sample_name+"_"+str(list(reads_sra.keys()).count(sample_name))
        reads_sra[sample_name]=str(i)
        if sra_data.loc[i, "LibraryLayout"].lower()=="paired":
            sras_ext[sample_name]=[f"sra/{sample_name}_1.fastq.gz", f"sra/{sample_name}_2.fastq.gz"]
        elif sra_data.loc[i, "LibraryLayout"].lower()=="single":
            sras_ext[sample_name] = ["fastq.gz"]
        else:
            raise ValueError("Problem in the sra file, LibraryLayout badly defined")
        all_samples.loc[sample_name, "ScientificName"]=sra_data.loc[i, "ScientificName"]
        all_samples["ScientificName"] = [str(i).replace(" ", "_") for i in all_samples["ScientificName"]]

read_naming = {**reads_local, **sras_ext}
##Define if samples are paired or not
sample_suffix=list(read_naming.values())
if len(sample_suffix[0])==2:
    paired=True
else:
    paired=False
##Define a function that gets fastq files whether the user wants to skip host-filtering and QC or not
def get_fastq_input():
    if config['skip_preprocess']:
        if paired:
            return expand("samples/{{sample}}/reads/raw/{{sample}}_R{rd}.fastq.gz",rd=[1,2])
        else:
            return "samples/{sample}/reads/raw/single_{sample}.fastq.gz"
    else:
        if paired:
            return expand("decontaminated-reads/{host_acc}/{{sample}}_R{rd}.fq",rd=[1,2],host_acc=host_acc)
        else:
            return f"decontaminated-reads/{host_acc}/{{sample}}_single.fq"
fastq_input_list=get_fastq_input()



reference_genomes = []
reference_genomes_dir = []
if "reference" in config:
    # preparing reference_genomes variable
    # 3 choices: cgMLST, local/sra sample or NCBI reference


    ref_list = config["reference"].split(",")
    sample_references = []
    ncbi_reference = []

    for ref in ref_list:
        if ref == "cgMLST":
            reference_genomes.append("cgMLST")
            reference_genomes_dir.append("cgMLST")
        elif 'parsnp' in ref:
            print("parsnp")
            reference_genomes.append(ref)
            reference_genomes_dir.append(ref)
        elif ref in read_naming.keys():
            reference_genomes.append("full_genome_%s_assembled_genome" % ref)
            reference_genomes_dir.append("%s_assembled_genome" % ref)
        else:
            try:
                # NCBI reference should be an integer (UID)
                test = int(ref)
                reference_genomes.append("full_genome_%s" % ref)
                reference_genomes_dir.append(ref)
                print("NCBI reference")
            except:
                raise IOError("Unexpected reference: %s" % ref)