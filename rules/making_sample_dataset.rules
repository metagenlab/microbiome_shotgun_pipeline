include:
    "logging.rules"

import sys
import pandas
import re

def get_read_naming_patterns(directory):
    result = []
    extension= {}
    for fname in os.listdir(directory):
        if fname.endswith("fastq.gz") or fname.endswith("fq.gz") or fname.endswith("fastq") or fname.endswith("fq"):
            regex_str = '(_L0+[1-9]+)?_(R)?(1|2)(\.|_)' #regex for finding R1 and R2, if L001 is present before, it is also included
            regex = re.compile(regex_str)
            ext = re.search(regex, fname)
            if ext is None:
                ext = re.search(r'f(?:ast)?q(?:\.gz)?', fname)
                samp = re.sub("\.$", "", re.search(r'^([^\.]*)\.*', fname).group(0))
                if samp in extension.keys():
                    if ext.group(0).endswith(".gz"):
                        extension[samp] = [ext.group(0)]
                else:
                    extension[samp] = [ext.group(0)]
            else:
                regex_after = re.compile(regex_str+".*")
                regex_before = re.compile(".*"+regex_str)
                read = re.compile(re.search(regex_after, fname).group(0))
                samp = re.sub(regex, '', re.search(regex_before, fname).group(0))
                extension.setdefault(samp, [])
                extension[samp].append(re.sub("^_", "", read.pattern))
    return(extension)

all_samples=pandas.DataFrame()

if "link_directory" in config.keys():
    link_directory = config["link_directory"]
    if not link_directory.endswith("/"):
        link_directory = link_directory + "/"
else:
    link_directory = "links/"

sras_ext = {}
reads_sra = {}

reads_local = {}
original_names = {}

if "local_samples" not in config.keys() and "sra_samples" not in config.keys():
    raise ValueError("No samples defined in the config file")

if "local_samples" in config.keys():
    local_data = pandas.read_csv(config["local_samples"], sep="\t", index_col=0)
    local_data.index = [str(x) for x in local_data.index]
    all_local_sample_names =  "".join(list(local_data.index))
    if "(" in all_local_sample_names or ")" in all_local_sample_names or "_-_" in all_local_sample_names:
        raise ValueError("Forbidden character in sample name in sample name file")
    reads_local = get_read_naming_patterns(link_directory)
    #print(reads_local)
    original_names = { x : x for x in reads_local.keys() }
    read_correct = {}
    original_correct = {}
    if "OldSampleName" not in list(local_data):
        for i in list(local_data.index):
            regex = re.compile(r'%s([^-a-zA-Z0-9]|$)' % i) # this regex ensures that the matching of the sample names end at the end of the str, to prevent S1 matching S10 for instance
            match = [bool(re.match(regex, x)) for x in sorted(list(original_names.keys()))]
            if sum(match) != 1: #there must be one and only one entry matching one sample name
                raise ValueError("Problem matching SampleName to read file names")
            sample = str(sorted(list(original_names.keys()))[match.index(True)])
            original_correct[i] = original_names[sample]
            read_correct[i] = reads_local[sample]
    else:
        for i in list(local_data["OldSampleName"]):
            regex = re.compile(r'%s([^-a-zA-Z0-9]|$)' % i)
            match = [bool(re.match(regex, x)) for x in sorted(list(original_names.keys()))]
            if sum(match) != 1:
                match_list = [x for x in sorted(list(original_names.keys())) if re.match(regex, x)]
                raise ValueError("Problem matching OldSampleName to read file names. OldSampleName %s match mutiple fastq files prefix: %s" % (i, match_list))
            old_sample_name=str(sorted(list(original_names.keys()))[match.index(True)])
            sample=str(local_data.index[local_data['OldSampleName'] == i][0])
            original_correct[sample] = original_names[old_sample_name]
            read_correct[sample] = reads_local[old_sample_name]
    original_names = original_correct
    reads_local = read_correct
    all_samples=local_data

if "sra_samples" in config.keys():
    sra_data = pandas.read_csv(config["sra_samples"], sep="\t", index_col=0).drop_duplicates()
    if 'use_library_name' not in config.keys():
        all_sra_sample_names = "".join([str(i) for i in list(sra_data["SampleName"])])
    else:
        all_sra_sample_names = "".join(list([str(x) for x in sra_data["LibraryName"]]))
    if "(" in all_sra_sample_names or ")" in all_sra_sample_names or "_-_" in all_sra_sample_names:
        raise ValueError("Forbidden character in sample name in sra file")
    for i in sra_data.index:
        if "size_MB" in list(sra_data):
            if sra_data.loc[i, "size_MB"] < 20: #do not include samples with low amount of data
                continue
        if 'use_library_name' not in config.keys():
            sample_name = str(sra_data.loc[i, "SampleName"]).replace(" ", "_").replace("&", "and").replace(":", "-")
        else:
            sample_name = str(sra_data.loc[i, "LibraryName"]).replace(" ", "_").replace("&", "and").replace(":", "-")
        if sample_name in reads_sra.keys(): # if the sample name is already used, add _(n+1) at the end
            sample_name = sample_name+"_"+str(list(reads_sra.keys()).count(sample_name))
        reads_sra[sample_name]=str(i)
        if sra_data.loc[i, "LibraryLayout"].lower()=="paired":
            sras_ext[sample_name]=["1.fastq.gz", "2.fastq.gz"]
        elif sra_data.loc[i, "LibraryLayout"].lower()=="single":
            sras_ext[sample_name] = ["fastq.gz"]
        else:
            raise ValueError("Problem in the sra file, LibraryLayout badly defined")
        all_samples.loc[sample_name, "ScientificName"]=sra_data.loc[i, "ScientificName"]

all_samples["ScientificName"] = all_samples["ScientificName"].str.replace(" ", "_")
read_naming = {**reads_local, **sras_ext}
original_names = {**original_names, **reads_sra}

#for key in read_naming:
#    print("%s\t%s\t%s" % (key, read_naming[key], original_names[key]))

#for i in list(read_naming.keys()):
#    print ("%s\t%s\t%s" % (i, read_naming[i], original_names[i]))

if "reference" in config:
    # preparing reference_genomes variable
    # 3 choices: cgMLST, local/sra sample or NCBI reference
    reference_genomes = []
    reference_genomes_dir = []

    ref_list = config["reference"].split(",")
    sample_references = []
    ncbi_reference = []

    for ref in ref_list:
        if ref == "cgMLST":
            reference_genomes.append("cgMLST")
            reference_genomes_dir.append("cgMLST")
        elif 'parsnp' in ref:
            print("parsnp")
            reference_genomes.append(ref)
            reference_genomes_dir.append(ref)
        elif ref in read_naming.keys():
            reference_genomes.append("full_genome_%s_assembled_genome" % ref)
            reference_genomes_dir.append("%s_assembled_genome" % ref)
        else:
            try:
                # NCBI reference should be an integer (UID)
                test = int(ref)
                reference_genomes.append("full_genome_%s" % ref)
                reference_genomes_dir.append(ref)
                print("NCBI reference")
            except:
                raise IOError("Unexpected reference: %s" % ref)
