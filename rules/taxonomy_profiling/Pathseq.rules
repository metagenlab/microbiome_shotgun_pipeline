rule all_Pathseq:
    input: expand()

rule Pathseq_no_trim:
    input:expand()

rule fastq_to_bam:
    conda: pipeline_path + "envs/picard.yml"

    input: r1="samples/{sample}/reads/raw/{sample}_R1.fastq.gz",
            r2="samples/{sample}/reads/raw/{sample}_R2.fastq.gz"

    output: "Pathseq/{sample}.bam"

    shell: "PicardCommandLine FastqToSam F1={input.r1} F2={input.r2} O={output} SM={wildcards.sample}"

rule build_host_kmer:
    singularity: "docker://broadinstitute/gatk:4.1.3.0"

    input: "PathseqDB/{host_acc}.fa"

    output: "PathseqDB/{host_acc}.bfi"

    params: kmer_size=config["kmer_size"],kmer_mask=config["kmer_mask"]

    shell:
    """
    gatk PathSeqBuildKmers -R {input} -O {output} -P 0.0001 --java-options "-Xmx60g"
    """

rule classify_reads:
    singularity: "docker://broadinstitute/gatk:4.1.3.0"

    input: host_kmer="PathseqDB/pathseq_host.bfi",
           host_ind="PathseqDB/pathseq_host.fa.img",
           microbe_fa="PathseqDB/pathseq_microbe.fa",
           microbe_ind="PathseqDB/pathseq_microbe.fa.img",
           microbe_dict="PathseqDB/pathseq_microbe.dict",
           tax_db="Pathseq/pathseq_taxonomy.db"