rule all_metaphlan:
    input: expand("metaphlan/{sample}/profiled_{sample}.tsv",sample=list(read_naming.keys()))

if paired:
    rule metaphlan_PE_reads:
        conda: pipeline_path + "envs/metaphlan.yml"

        input:  r1=fastq_input_list[0],
                r2=fastq_input_list[1]

        output: txt="metaphlan/{sample}/profiled_{sample}.txt",
                bz2="metaphlan/{sample}/{sample}.bowtie2.bz2"

        threads: config["num_cores"]

        log: logging_folder + "metaphlan/{sample}.log"

        benchmark: "benchmark/resources_usage/{sample}/metaphlan.benchmark.txt"

        shell:
             """
             metaphlan {input.r1},{input.r2} --bowtie2out {output.bz2} -t rel_ab_w_read_stats --add_viruses --nproc {threads} --input_type fastq -o {output.txt} 2> {log}
             """
else:
     rule metaphlan_SE_reads:
        conda: pipeline_path + "envs/metaphlan.yml"

        input:  get_fastq_input

        output: txt="metaphlan/{sample}/profiled_{sample}.txt",
                bz2="metaphlan/{sample}/{sample}.bowtie2.bz2"

        threads: config["num_cores"]

        log: logging_folder + "metaphlan/{sample}.log"

        benchmark: "benchmark/resources_usage/{sample}/metaphlan.benchmark.txt"

        shell:
             """
             metaphlan {input} --bowtie2out {output.bz2} -t rel_ab_w_read_stats --add_viruses --nproc {threads} --input_type fastq -o {output.txt} 2> {log}
             """

rule get_tax_table_metaphlan:
   input: "metaphlan/{sample}/profiled_{sample}.txt"

   output: "metaphlan/{sample}/profiled_{sample}.tsv"

   shell: "tail -n+5 {input} > {output}"