db_path_ezvir=config["ezvir_database"]

common=config["common"]
if common==True:
    fasta_name=config["fasta_name"]

else:
    fasta_name='EZV0.1-database'

host_acc=config['reference_genome']['filename']


if config["virus_family"]=='NA':
    rule all_ezvir:
        input:  bam=expand("ezVIR/{sample}/{sample}.bam",sample=list(read_naming.keys())),
                all_genomes=expand("ezVIR/{sample}/report/ALL-RESULTS.ezv",sample=list(read_naming.keys())),
                best_genomes=expand("ezVIR/{sample}/report/BEST-GENOMES.ezv",sample=list(read_naming.keys())),
                plot=expand("ezVIR/{sample}/report/{sample}_p1-plot.pdf",sample=list(read_naming.keys()))

else:
    rule all_ezvir:
        input:  bam=expand("ezVIR/{sample}/{sample}.bam",sample=list(read_naming.keys())),
                all_genomes=expand("ezVIR/{sample}/report/ALL-RESULTS.ezv",sample=list(read_naming.keys())),
                best_genomes=expand("ezVIR/{sample}/report/BEST-GENOMES.ezv",sample=list(read_naming.keys())),
                plot=expand("ezVIR/{sample}/report/{sample}_p1-plot.pdf",sample=list(read_naming.keys())),
                coverage=expand("ezVIR/{sample}/report/{target_virus}_coverage-histogram.pdf",sample=list(read_naming.keys()),target_virus=config["virus_family"])

sample_suffix=list(read_naming.values())
if len(sample_suffix[0])==2:
    paired=True
else:
    paired=False

if paired==True:
    rule ezVIR_mapping_PE_reads:
        conda: pipeline_path + "envs/ezvir.yml"

        input: r1=f"decontaminated-reads/{host_acc}/{{sample}}_R1.fq",
                r2=f"decontaminated-reads/{host_acc}/{{sample}}_R2.fq"

        params: genome_path=f"{db_path_ezvir}/{fasta_name}"

        threads: config["num_cores"]

        output: "ezVIR/{sample}/{sample}.bam"

        log: logging_folder + "ezVIR/mapping/{sample}.log"

        benchmark: temp("benchmark/resources_usage/{sample}/ezvir.mapping.txt")

        shell:
            """
            bowtie2 -p {threads} -q1 {input.r1} -q2 {input.r2} -x {params.genome_path} 2> {log} | samtools view -bS -F 12 2> {log} | samtools sort -n -O BAM -o {output} 2> {log}
            """
else:

    rule ezVIR_mapping_SE_reads:
        conda: pipeline_path + "envs/ezvir.yml"

        input: expand("decontaminated-reads/{host_acc}/{{sample}}_single.fq",host_acc=config['reference_genome']['filename'])

        params: genome_path=f"{db_path_ezvir}/{fasta_name}"

        threads: config["num_cores"]

        output: "ezVIR/{sample}/{sample}.bam"

        log:  logging_folder + "ezVIR/mapping/{sample}.log"

        benchmark: temp("benchmark/resources_usage/{sample}/ezvir.mapping.txt")

        shell:
            """
            bowtie2 -p {threads} -q {input} -x {params.genome_path} 2> {log} | samtools view -bS -F 12 2> {log} | samtools sort -n -O BAM -o {output} 2> {log}
            """




rule ezVIR_genome_coverage:
    conda: pipeline_path + "envs/ezvir.yml"

    input: "ezVIR/{sample}/{sample}.bam"

    output: temp("ezVIR/{sample}/{sample}.csv")

    log: logging_folder + "ezVIR/coverage/{sample}.log"

    shell:
        """
        bedtools genomecov -dz -ibam {input} > {output} 2> {log}
        """


checkpoint split_coverage_file:
    conda: pipeline_path + "envs/ezvir.yml"

    input: "ezVIR/{sample}/{sample}.csv"

    output: directory("ezVIR/{sample}/coverage")

    params: "ezVIR/{sample}/coverage"

    script: "scripts/ezVIR/coverage-parse.py"

import os
def get_csv(wildcards):
    checkpoint_output = checkpoints.split_coverage_file.get(**wildcards).output[0]
    return expand("ezVIR/{sample}/coverage/{i}.csv",sample=wildcards.sample,i=glob_wildcards(os.path.join(checkpoint_output, "{i}.csv")).i)


rule ezVIR_report:
    conda: pipeline_path + "envs/ezvir.yml"

    input: get_csv

    output: "ezVIR/{sample}/report/{sample}_p1-plot.pdf",
            "ezVIR/{sample}/report/ALL-RESULTS.ezv",
            "ezVIR/{sample}/report/BEST-GENOMES.ezv"

    params: report_script_path=pipeline_path + "rules/taxonomy_profiling/scripts/ezVIR/Report.r",
            csv_dir="../coverage",
            read_len=config["samples_read_length"],
            genome_len=f"{db_path_ezvir}/genome_lengths.csv",
            colors=f"{db_path_ezvir}/colours.csv",
            db_names=f"{db_path_ezvir}/genome_names.csv"

    benchmark: temp("benchmark/resources_usage/{sample}/ezvir.report.txt")

    shell:
        """
        cd ezVIR/{wildcards.sample}/report
        Rscript {params.report_script_path} -c {params.colors} -r {params.read_len} -g {params.genome_len} -j {params.db_names} -i {params.csv_dir} -o {wildcards.sample}
        """


rule ezVIR_concat_resources_usage:
    input: mapping="benchmark/resources_usage/{sample}/ezvir.mapping.txt",
            report="benchmark/resources_usage/{sample}/ezvir.report.txt"

    output: "benchmark/resources_usage/{sample}/ezvir.benchmark.txt"

    shell:
        """
        cat {input.mapping} {input.report} > {output}
        """


rule generate_coverage_histograms_ezVIR:
    conda: pipeline_path + "envs/ezvir.yml"

    input: "ezVIR/{sample}/report/BEST-GENOMES.ezv"

    output: "ezVIR/{sample}/report/{target_virus}_coverage-histogram.pdf"

    params: cov_script_path=pipeline_path + "rules/taxonomy_profiling/scripts/ezVIR/Coverage_histograms.r",
            csv_dir="../coverage",
            target_family=config["virus_family"],
            names_tab=f"{db_path_ezvir}/genome_names.csv",
            genome_len=f"{db_path_ezvir}/genome_lengths.csv",
            min_cov=config["min_cov"]

    shell:
         """
         cd ezVIR/{wildcards.sample}/report
         Rscript {params.cov_script_path} -d {params.csv_dir} -b BEST-GENOMES.ezv -s "{params.target_family}" -n {params.names_tab} -g {params.genome_len} -m {params.min_cov}
         """





