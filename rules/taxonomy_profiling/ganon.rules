ganon_db_path=config["ganon_db_path"]
job_mem_alloc=config["job_memory_limit"]
rule all_ganon:
    input: expand("ganon/{sample}/classified.rep",sample=list(read_naming.keys()))

if paired:
    rule ganon_PE_reads:
        conda: pipeline_path + "envs/ganon.yml"

        input: r1=fastq_input_list[0],
               r2=fastq_input_list[1]

        output: classified="ganon/{sample}/classified.out",
                unclassified="ganon/{sample}/unclassified.txt",
                report="ganon/{sample}/classified.rep"

        params: f"{ganon_db_path}"

        threads: config["num_cores"]

        log: logging_folder + "ganon/classify/{sample}.log"

        benchmark: "benchmark/resources_usage/{sample}/ganon.benchmark.txt"

        resources: mem_gb=job_mem_alloc

        shell:
             """
             ganon classify -d {params} -p {input.r1} {input.r2} -t {threads} -o ganon/{wildcards.sample}/classified \
             -n {output.unclassified} --verbose &>> {log}
             """

else:
    rule ganon_SE_reads:
        conda: pipeline_path + "envs/ganon.yml"

        input: r1=get_fastq_input

        output: classified="ganon/{sample}/classified.out",
                unclassified="ganon/{sample}/unclassified.txt",
                report="ganon/{sample}/classified.rep"

        params: f"{ganon_db_path}"

        threads: config["num_cores"]

        log: logging_folder + "ganon/classify/{sample}.log"

        benchmark: "benchmark/resources_usage/{sample}/ganon.benchmark.txt"

        resources: mem_gb=job_mem_alloc

        shell:
             """
             ganon classify -d {params} -r {input.r1} -t {threads} -o ganon/{wildcards.sample}/classified \
             -n {output.unclassified} --verbose &>> {log}
             """



