db_path_ezvir=config["ezvir_database"]

if config["virus_family"]=='NA':
    rule all_ezvir:
        input: expand("Ezvir/{sample}/report/ALL-RESULTS.ezv",sample=list(read_naming.keys()))
else:

    rule all_ezvir:
        input: expand("Ezvir/{sample}/report/{target_virus}_coverage-histogram.pdf",sample=list(read_naming.keys()),target_virus=config["virus_family"])

def paired(wildcards):
    fastq_list = read_naming[wildcards.sample]
    if len(fastq_list) == 2:
        return True
    else:
        return False

if paired:
    rule map_paired_decontaminated_reads:
        conda: pipeline_path + "envs/ezvir.yml"

        input: r1=expand("unmapped/{host_acc}/{{sample}}_R1.fq",host_acc=config['reference_genome']['filename']),
                r2=expand("unmapped/{host_acc}/{{sample}}_R2.fq",host_acc=config['reference_genome']['filename'])

        params: genome_path=f"{db_path_ezvir}/EZV0.1-database"

        threads: 10

        output: "Ezvir/{sample}/{sample}.bam"

        log: logging_folder + "Ezvir/mapping/{sample}.log"

        shell:
            """
            bowtie2 -p {threads} -q1 {input.r1} -q2 {input.r2} -x {params.genome_path} 2> {log} | samtools view -bS -F 12 2> {log} | samtools sort -n -O BAM -o {output} 2> {log}
            """
else:

    rule map_single_decontaminated_reads:
        conda: pipeline_path + "envs/ezvir.yml"

        input: expand("unmapped/{host_acc}/{{sample}}_single.fq",host_acc=config['reference_genome']['filename'])

        params: genome_path=f"{db_path_ezvir}/EZV0.1-database"

        threads: 10

        output: "Ezvir/{sample}/{sample}.bam"

        log:  logging_folder + "Ezvir/mapping/{sample}.log"

        shell:
            """
            bowtie2 -p {threads} -q {input} -x {params.genome_path} | samtools view -bS -F 4 | samtools sort -n -O BAM -o {output} 2> {log}
            """




rule calculate_genome_coverage:
    conda: pipeline_path + "envs/ezvir.yml"

    input: "Ezvir/{sample}/{sample}.bam"

    output: temp("Ezvir/{sample}/{sample}.csv")

    log: logging_folder + "Ezvir/coverage/{sample}.log"

    shell:
        """
        bedtools genomecov -dz -ibam {input} > {output} 2> {log}
        """


checkpoint split_coverage_file:
    conda: pipeline_path + "envs/ezvir.yml"

    input: "Ezvir/{sample}/{sample}.csv"

    output: directory("Ezvir/{sample}/coverage")

    params: "Ezvir/{sample}/coverage"

    script: "scripts/Ezvir/coverage-parse.py"

import os
def get_csv(wildcards):
    checkpoint_output = checkpoints.split_coverage_file.get(**wildcards).output[0]
    return expand("Ezvir/{sample}/coverage/{i}.csv",sample=wildcards.sample,i=glob_wildcards(os.path.join(checkpoint_output, "{i}.csv")).i)


rule phase_1_report:
    conda: pipeline_path + "envs/ezvir.yml"

    input: get_csv

    output: "Ezvir/{sample}/report/{sample}_p1-plot.pdf",
            "Ezvir/{sample}/report/ALL-RESULTS.ezv",
            "Ezvir/{sample}/report/BEST-GENOMES.ezv"

    params: report_script_path=pipeline_path + "rules/taxonomy_profiling/scripts/Ezvir/Report.r",
            csv_dir="../coverage",
            read_len=config["samples_read_length"],
            genome_len="../../genome_lengths.csv"

    shell:
        """
        cd Ezvir/{wildcards.sample}/report
        Rscript {params.report_script_path} -c ../../COLORS.ezv -r {params.read_len} -g {params.genome_len} -j ../../Ezvir_names_db.ezv -i {params.csv_dir} -o {wildcards.sample}
        """
rule generate_coverage_histograms:
    conda: pipeline_path + "envs/ezvir.yml"

    input: "Ezvir/{sample}/report/BEST-GENOMES.ezv"

    output: "Ezvir/{sample}/report/{target_virus}_coverage-histogram.pdf"

    params: cov_script_path=pipeline_path + "rules/taxonomy_profiling/scripts/Ezvir/Coverage_histograms.r",
            csv_dir="../coverage",
            target_family=config["virus_family"],
            names_tab="Ezvir/genome_names.csv"

    shell:
         """
         cd Ezvir/{wildcards.sample}/report
         Rscript {params.cov_script_path} -d {params.csv_dir} -b BEST-GENOMES.ezv -s {params.target_family}
         """





