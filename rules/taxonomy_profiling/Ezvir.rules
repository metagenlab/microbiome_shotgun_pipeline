db_path_ezvir=config["ezvir_database"]

rule all_ezvir:
    input: expand("Ezvir/{sample}/report/{target_virus}_coverage-histogram.pdf",sample=list(read_naming.keys()),target_virus=config["virus_family"])

rule map_decontaminated_PE_reads:
    conda: pipeline_path + "envs/ezvir.yml"

    input: r1=expand("unmapped/{host_acc}/{{sample}}_R1.fq",host_acc=config['reference_genome']['filename']),
            r2=expand("unmapped/{host_acc}/{{sample}}_R2.fq",host_acc=config['reference_genome']['filename'])

    params: genome_path=db_path_ezvir + "index/{genome_id}"

    threads: 1

    output: "Ezvir/{sample}/bam/PE_{genome_id}.bam"

    shell:
        """
        bowtie2 -p {threads} -q1 {input.r1} -q2 {input.r2} \
        -x {params.genome_path} | samtools view -bS -F 12 | samtools sort -n -O BAM -o {output} 
        """
rule map_decontaminated_SE_reads:
    conda: pipeline_path + "envs/ezvir.yml"

    input: expand("unmapped/{host_acc}/{{sample}}_single.fq",host_acc=config['reference_genome']['filename'])

    params: genome_path=db_path_ezvir + "index/{genome_id}"

    threads: 1

    output: "Ezvir/{sample}/bam/SE_{genome_id}.bam"

    shell:
        """
        bowtie2 -p {threads} -q {input} \
        -x {params.genome_path} | samtools view -bS -F 4 | samtools sort -n -O BAM -o {output} 
        """
import pandas as pd
def get_bam_list(wildcards):
    checkpoint_genome_nam=checkpoints.genrate_required_files.get(**wildcards).output[1]
    table=pd.read_csv(checkpoint_genome_nam,delimiter='\t',index_col=0)
    fasta_ids=list(table.index)
    fastq_list = read_naming[wildcards.sample]
    if len(fastq_list) == 2:
        bam_list=expand("Ezvir/{{sample}}/bam/PE_{genome_id}.bam",genome_id=fasta_ids)
    else:
        bam_list=expand("Ezvir/{{sample}}/bam/SE_{genome_id}.bam",genome_id=fasta_ids)
    return bam_list

checkpoint copy_non_empty_bam:
    input: get_bam_list

    output: directory("Ezvir/{sample}/non-empty-bams")

    shell:
        """
        mkdir {output}
        find Ezvir/{wildcards.sample}/bam -type f -size +400c -exec cp {{}} {output} \;
        """


rule calculate_genome_coverage:
    conda: pipeline_path + "envs/ezvir.yml"

    input: "Ezvir/{sample}/non-empty-bams/{i}.bam"

    output: "Ezvir/{sample}/coverage/{i}.csv"

    shell:
        """
        bedtools genomecov -d -ibam {input} > {output}
        """
def get_csv_list(wildcards):
    checkpoint_output = checkpoints.copy_non_empty_bam.get(**wildcards).output[0]
    return expand("Ezvir/{{sample}}/coverage/{i}.csv",i=glob_wildcards(os.path.join(checkpoint_output,"{i}.bam")).i)

rule cat_coverage_tables:
    input: get_csv_list

    output: "Ezvir/{sample}/all.csv"

    shell: "cat {input} >> {output}"



rule phase_1_report:
    conda: pipeline_path + "envs/ezvir.yml"

    input: "Ezvir/{sample}/all.csv"

    output: "Ezvir/{sample}/report/{sample}_p1-plot.pdf",
            "Ezvir/{sample}/report/ALL-RESULTS.ezv",
            "Ezvir/{sample}/report/BEST-GENOMES.ezv"

    params: report_script_path=pipeline_path + "rules/taxonomy_profiling/scripts/Ezvir/Report.r",
            csv_dir="../coverage",

    shell:
        """
        cd Ezvir/{wildcards.sample}/report
        Rscript {params.report_script_path} -c ../../COLORS.ezv -j ../../Ezvir_names_db.ezv -i {params.csv_dir} -o {wildcards.sample}
        """
rule generate_coverage_histograms:
    conda: pipeline_path + "envs/ezvir.yml"

    input: "Ezvir/{sample}/report/BEST-GENOMES.ezv"

    output: "Ezvir/{sample}/report/{target_virus}_coverage-histogram.pdf"

    params: cov_script_path=pipeline_path + "rules/taxonomy_profiling/scripts/Ezvir/Coverage_histograms.r",
            csv_dir="../coverage",
            target_family=config["virus_family"],
            names_tab="Ezvir/genome_names.csv"

    shell:
         """
         cd Ezvir/{wildcards.sample}/report
         Rscript {params.cov_script_path} -d {params.csv_dir} -b BEST-GENOMES.ezv -s {params.target_family}
         """





