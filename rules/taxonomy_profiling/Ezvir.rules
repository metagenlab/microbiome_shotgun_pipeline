db_path_ezvir=config["ezvir_database"]
rule all_ezvir:
    input: expand("Ezvir/{sample}/genomes_with_cov.csv",sample=list(read_naming.keys()))


rule map_decontaminated_PE_reads:
    conda: pipeline_path + "envs/ezvir.yml"

    input: r1=expand("unmapped/{host_acc}/{{sample}}_R1.fq",host_acc=config['reference_genome']['filename']),
            r2=expand("unmapped/{host_acc}/{{sample}}_R2.fq",host_acc=config['reference_genome']['filename'])

    params: genome_path=db_path_ezvir + "index/{genome_id}"

    threads: 1

    output: "Ezvir/{sample}/bam/PE_{genome_id}.bam"

    shell:
        """
        bowtie2 -p {threads} -q1 {input.r1} -q2 {input.r2} \
        -x {params.genome_path} | samtools view -bS -F 12 | samtools sort -n -O BAM -o {output} 
        """
rule map_decontaminated_SE_reads:
    conda: pipeline_path + "envs/ezvir.yml"

    input: expand("unmapped/{host_acc}/{{sample}}_single.fq",host_acc=config['reference_genome']['filename'])

    params: genome_path=db_path_ezvir + "index/{genome_id}"

    threads: 1

    output: "Ezvir/{sample}/bam/SE_{genome_id}.bam"

    shell:
        """
        bowtie2 -p {threads} -q {input} \
        -x {params.genome_path} | samtools view -bS -F 4 | samtools sort -n -O BAM -o {output} 
        """
import pandas as pd
def get_bam_list(wildcards):
    checkpoint_genome_nam=checkpoints.genrate_required_files.get(**wildcards).output[1]
    table=pd.read_csv(checkpoint_genome_nam,delimiter='\t',index_col=0)
    fasta_ids=list(table.index)
    fastq_list = read_naming[wildcards.sample]
    if len(fastq_list) == 2:
        return expand("Ezvir/{{sample}}/coverage/PE_{genome_id}.bam",genome_id=fasta_ids)
    else:
        return expand("Ezvir/{{sample}}/coverage/SE_{genome_id}.bam",genome_id=fasta_ids)

checkpoint copy_non_empty_bam:
    input: get_bam_list

    output: directory("Ezvir/{sample}/non-empty-bams")

    shell: "find Ezvir/{sample}/bam -type f -size +400c -exec cp {} {output} \;"


def get_non_empty_bams(wildcards):
    checkpoint_output = checkpoints.copy_non_empty_bam.get(**wildcards).output[0]
    return expand("Ezvir/{{sample}}/non-empty-bams/{i}",i=glob_wildcards(os.path.join(checkpoint_output, "{i}.bam")).i)

rule calculate_genome_coverage:
    conda: pipeline_path + "envs/ezvir.yml"


    input: get_non_empty_bams

    output: "Ezvir/{sample}/coverage/{genome_id}.csv"

    shell:
        """
        bedtools genomecov -d -ibam {input} > {output}
        """




#rule phase_1_report:
#    conda: pipeline_path + "envs/ezvir.yml"

#    input: aggregate_csv

#    output: "Ezvir/{sample}/output/output.log"

 #   params: script_path=pipeline_path + "rules/taxonomy_profiling/scripts/Ezvir"

  #  shell:
   #     """
    #    cd Ezvir/{wildcards.sample}/output
     #   {params.script_path}/Report.r -c Ezvir/COLORS.ezv -j GENOMES_NO-ANIMAL-140527.ezv -i {input} -o {wildcards.sample}
      #  echo 'done' > {output}
       # """




