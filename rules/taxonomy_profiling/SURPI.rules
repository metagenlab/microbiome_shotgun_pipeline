surpi_db=config["surpi_database"]

rule all_surpi:
    input:  bac=expand("SURPI/{sample}/OUTPUT_{sample}/{sample}.NT.snap.matched.d1.fl.Bacteria.annotated.species.clx.counttable",sample=list(read_naming.keys())),
            vir=expand("SURPI/{sample}/OUTPUT_{sample}/{sample}.NT.snap.matched.d16.fl.Viruses.filt.NTblastn_tru.dust.annotated.species.clx.counttable",sample=list(read_naming.keys()))

def paired(wildcards):
    fastq_list = read_naming[wildcards.sample]
    if len(fastq_list)==2:
        return True
    else:
        return False

if paired==True:
    rule SURPI_interleve_paired_fastq:
        conda: pipeline_path + "envs/fastq-join.yml"

        input: expand("unmapped/{host_acc}/{{sample}}_R1.fq",host_acc=config['reference_genome']['filename']),
               expand("unmapped/{host_acc}/{{sample}}_R2.fq",host_acc=config['reference_genome']['filename'])

        output: temp("SURPI/{sample}/{sample}_join.fastq"),
                temp("SURPI/{sample}/{sample}_un1.fastq"),
                temp("SURPI/{sample}/{sample}_un2.fastq")

        log:
            logging_folder + "SURPI/{sample}.log"

        shell: "fastq-join {input[0]} {input[1]} -o SURPI/{wildcards.sample}/{wildcards.sample}_%.fastq &> {log}"

else:
    rule SURPI_copy_single_fastq:
        input: expand("unmapped/{host_acc}/{{sample}}_single.fq",host_acc=config['reference_genome']['filename'])

        output: temp("SURPI/{sample}/{sample}_join.fastq")

        shell: "cp {input} {output}"


rule rename_fastq_headers:
    input: "SURPI/{sample}/{sample}_join.fastq"

    output: "SURPI/{sample}/{sample}.fastq"

    shell:
        """
        awk '{{print (NR%4 == 1) ? "@SRR_" ++i : $0}}' {input} > {output}
        """


rule generate_preprocessed_files:
    input: "SURPI/{sample}/{sample}.fastq"

    output: "SURPI/{sample}/{sample}.cutadapt.fastq",
            "SURPI/{sample}/{sample}.preprocessed.fastq"

    shell:
        """
        cp {input} {output[0]}
        cp {input} {output[1]}
        """

rule generate_config_file_surpi:
        input: "SURPI/{sample}/{sample}.cutadapt.fastq"

        output: temp("SURPI/{sample}/{sample}.config")

        params: surpi_db_path=config["surpi_database"],
                adapter_set=config["adapter_set"],
                quality=config["quality"],
                nb_cores=config["num_cores"]

        script: "scripts/SURPI/surpi_config_file.py"


rule run_surpi:
    singularity: "library://fchaaban/default/surpi:1.0.1"

    input:  "SURPI/{sample}/{sample}.config"

    output: temp("SURPI/{sample}/OUTPUT_{sample}/{sample}.NT.snap.matched.d16.fl.all.annotated"),
            temp("SURPI/{sample}/OUTPUT_{sample}/{sample}.human.snap.unmatched.NT.tax.sam.alignment.db"),
            temp("SURPI/{sample}/OUTPUT_{sample}/{sample}.NT.snap.matched.d16.fl.nonPrimMammal.annotated"),
            "SURPI/{sample}/LOG_{sample}/{sample}.human.snap.unmatched.snap_index_nt_curated_primate_subtracted.FASTA.4.snap.log",
            temp("SURPI/{sample}/TRASH_{sample}/{sample}.cutadapt.fastq"),
            temp("SURPI/{sample}/TRASH_{sample}/{sample}.NT.snap.tax.matched.sam"),
            temp("SURPI/{sample}/TRASH_{sample}/{sample}.preprocessed.fastq"),
            temp("SURPI/{sample}/TRASH_{sample}/{sample}.NT.snap.matched.fulllength.fastq"),
            temp("SURPI/{sample}/{sample}.NT.snap.tax.matched.sorted.sam"),
            temp("SURPI/{sample}/{sample}.NT.snap.tax.matched.sorted.sam.tmp1"),
            temp("SURPI/{sample}/{sample}.NT.snap.tax.matched.sorted.sam.tmp2"),
            "SURPI/{sample}/OUTPUT_{sample}/{sample}.NT.snap.matched.d1.fl.Bacteria.annotated.species.clx.counttable",
            "SURPI/{sample}/OUTPUT_{sample}/{sample}.NT.snap.matched.d16.fl.Viruses.filt.NTblastn_tru.dust.annotated.species.clx.counttable"

    params: reference=surpi_db,
            logging_folder=logging_folder+"SURPI/{sample}.log"

    threads: config["num_cores"]

    resources: mem_mb=1

    log: logging_folder+"SURPI/{sample}.log"

    benchmark: "benchmarks/resources_usage/{sample}/surpi.benchmark.txt"

    shell:
        """
        cd SURPI/{wildcards.sample}
        bash /scif/apps/SURPI/SURPI/SURPI.sh -f {wildcards.sample}.config &> ../../{params.logging_folder}
        """
