kraken_db_path=config["kraken_database"]

rule all_kraken_standard_db:
    input: f"{kraken_db_path}/taxo.k2d",
           f"{kraken_db_path}/taxonomy/names.dmp",
           f"{kraken_db_path}/taxonomy/nodes.dmp",
           f"{kraken_db_path}/library/UniVec_Core/library.fna",
           f"{kraken_db_path}/library/human/library.fna",
           f"{kraken_db_path}/library/viral/library.fna",
           f"{kraken_db_path}/library/bacteria/library.fna",
           f"{kraken_db_path}/library/archaea/library.fna",
           f"{kraken_db_path}/Kraken2X/taxo.k2d"



rule download_Kraken2_archea_database:
    conda: pipeline_path + "envs/kraken2.yml"

    output: f"{kraken_db_path}/library/archaea/library.fna"

    params: kraken_db_path

    log: logging_folder + "kraken_DB/DB_archea_dl.log"

    threads: 1

    shell:
         """
         kraken2-build --download-library archaea --threads {threads} --use-ftp --db {params} 2> {log}
         """

rule download_Kraken2_bacteria_database:
    conda: pipeline_path + "envs/kraken2.yml"

    output: f"{kraken_db_path}/library/bacteria/library.fna"

    params: kraken_db_path

    log: logging_folder + "kraken_DB/DB_bacteria_dl.log"

    threads: 1

    shell:
         """
         kraken2-build --download-library bacteria --threads {threads} --use-ftp --db {params} 2> {log}
         """

rule download_Kraken2_viral_database:
    conda: pipeline_path + "envs/kraken2.yml"

    output: f"{kraken_db_path}/library/viral/library.fna"

    params: kraken_db_path

    log: logging_folder + "kraken_DB/DB_viral_dl.log"

    threads: 1

    shell:
         """
         kraken2-build --download-library viral --threads {threads} --use-ftp --db {params} 2> {log}
         """

rule download_Kraken2_human_database:
    conda: pipeline_path + "envs/kraken2.yml"

    output: f"{kraken_db_path}/library/human/library.fna"

    params: kraken_db_path

    log: logging_folder + "kraken_DB/DB_human_dl.log"

    threads: 1

    shell:
         """
         kraken2-build --download-library human --threads {threads} --use-ftp --db {params} 2> {log}
         """

rule download_Kraken2_Univec_database:
    conda: pipeline_path + "envs/kraken2.yml"

    output: f"{kraken_db_path}/library/UniVec_Core/library.fna"

    params: kraken_db_path

    log: logging_folder + "kraken_DB/DB_Univec_dl.log"

    threads: 1

    shell:
         """
         kraken2-build --download-library UniVec_Core --threads {threads} --use-ftp --db {params} 2> {log}
         """


rule download_Kraken2_ncbi_taxonomy_database:
    conda: pipeline_path + "envs/kraken2.yml"

    output: f"{kraken_db_path}/taxonomy/names.dmp",
            f"{kraken_db_path}/taxonomy/nodes.dmp"

    params: kraken_db_path

    log: logging_folder + "kraken_DB/DB_taxonomy_dl.log"

    threads: 1

    shell:
         """
         kraken2-build --download-taxonomy --threads {threads} --use-ftp --db {params} 2> {log}
         """


rule building_Kraken2_standard_database:
    conda: pipeline_path + "envs/kraken2.yml"

    output: f"{kraken_db_path}/taxo.k2d"

    params: kraken_db_path

    log: logging_folder + "kraken_DB/DB_build.log"

    threads: 30

    shell:
         """
         kraken2-build --build --threads {threads} --db {params} &> {log}
         """


rule concat_library_fna:
     input: f"{kraken_db_path}/library/UniVec_Core/library.fna",
            f"{kraken_db_path}/library/human/library.fna",
            f"{kraken_db_path}/library/viral/library.fna",
            f"{kraken_db_path}/library/bacteria/library.fna",
            f"{kraken_db_path}/library/archaea/library.fna"

     output: temp(f"{kraken_db_path}/library/all.fna")

     shell:
        """
        cat {input} >> {output}
        """

rule copy_names_nodes:
    input:  names=f"{kraken_db_path}/taxonomy/names.dmp",
            nodes=f"{kraken_db_path}/taxonomy/nodes.dmp"

    output: names=f"{kraken_db_path}/Kraken2X/taxonomy/names.dmp",
            nodes=f"{kraken_db_path}/Kraken2X/taxonomy/nodes.dmp"

    shell:
        """
        cp {input.names} {output.names}
        cp {input.nodes} {output.nodes}
        """

rule building_Kraken2X_standard_database:
    conda: pipeline_path + "envs/kraken2.yml"

    input: names=f"{kraken_db_path}/Kraken2X/taxonomy/names.dmp",
           nodes=f"{kraken_db_path}/Kraken2X/taxonomy/nodes.dmp",
           fna=f"{kraken_db_path}/library/all.fna"

    output: f"{kraken_db_path}/Kraken2X/taxo.k2d"

    params: f"{kraken_db_path}/Kraken2X"

    threads: 30

    log: logging_folder + "kraken_DB/Kraken2X_DB_build.log"

    shell:
         """
         kraken2-build --db {params} --add-to-library {input.fna} --protein &>> {log}
         kraken2-build --db {params} --threads {threads} --build -protein &>> {log}
         """