
rule all_tools_output:
    input: all_tsv=expand("tool_outputs_comparison/{tool}.tsv",tool=['all_kraken2','all_bracken','all_pathseq','all_kaiju','all_surpi','all_ezvir','all_ganon']),
            all_hetmaps=expand("tool_outputs_comparison/heatmaps/{tool}.png",tool=['all_kraken2','all_bracken','all_pathseq','all_kaiju','all_surpi','all_ezvir','all_ganon'])


def paired(wildcards):
    fastq_list = read_naming[wildcards.sample]
    if len(fastq_list) == 2:
        return True
    else:
        return False

rule merge_Kraken2_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("kraken2/{sample}/report.txt",sample=list(read_naming.keys()))

    output: "tool_outputs_comparison/all_kraken2.tsv"

    script: "scripts/kraken2-merge.py"

rule merge_Bracken_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("kraken2/{sample}/bracken.txt",sample=list(read_naming.keys()))

    output: "tool_outputs_comparison/all_bracken.tsv"

    script: "scripts/bracken-merge.py"

rule merge_Pathseq_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("Pathseq/{sample}/output/scores.txt",sample=list(read_naming.keys()))

    output: "tool_outputs_comparison/all_pathseq.tsv"

    script: "scripts/pathseq-merge.py"

rule merge_kaiju_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("kaiju/{sample}/summary.tsv",sample=list(read_naming.keys()))

    output: "tool_outputs_comparison/all_kaiju.tsv"

    script: "scripts/kaiju-merge.py"

rule merge_SURPI_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: bac=expand("SURPI/{sample}/OUTPUT_{sample}/{sample}.NT.snap.matched.d1.fl.Bacteria.annotated.species.clx.counttable",sample=list(read_naming.keys())),
           vir=expand("SURPI/{sample}/OUTPUT_{sample}/{sample}.NT.snap.matched.d16.fl.Viruses.filt.NTblastn_tru.dust.annotated.species.clx.counttable",sample=list(read_naming.keys()))
            #dust.annotated file because low complexity regions are substracted

    output: "tool_outputs_comparison/all_surpi.tsv"

    log: logging_folder + "tool_outputs_comparison/surpi.log"

    script: "scripts/surpi-merge.py"


rule merge_ezvir_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("Ezvir/{sample}/report/ALL-RESULTS.ezv",sample=list(read_naming.keys()))

    output: "tool_outputs_comparison/all_ezvir.tsv"

    params: read_len=config["samples_read_length"]

    script: "scripts/Ezvir-merge.py"


rule merge_ganon_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: vir=expand("ganon/{sample}/viruses/classified.rep",sample=list(read_naming.keys())),
           #human=expand("ganon/{sample}/human/classified.rep",sample=list(read_naming.keys())),
           bac=expand("ganon/{sample}/bacteria/classified.rep",sample=list(read_naming.keys()))

    output: "tool_outputs_comparison/all_ganon.tsv"

    script: "scripts/ganon-merge.py"



rule generate_heatmaps:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: "tool_outputs_comparison/{tool}.tsv"

    output: "tool_outputs_comparison/heatmaps/{tool}.png"

    params: rank=config["target_rank"]

    script: "scripts/heatmap.py"








