
#setup all tools native database
surpi_db=config["surpi_database"]
pathseq_db=config["pathseq_database"]
kraken_db_path=config["kraken_database"]
ganon_db_path=config["ganon_db_path"]
db_path_ezvir=config["ezvir_database"]
read_len=config["samples_read_length"]
kmer_len=config["kraken_kmer_len"]

rule all_database_setup:
    input: surpi_db=f"{surpi_db}/build/nt_curated.fa",
           pathseq_host_fai=f"{pathseq_db}/pathseq_host.fa.fai",
           pathseq_host_fa=f"{pathseq_db}/pathseq_host.fa",
           pathseq_host_bfi=f"{pathseq_db}/pathseq_host.bfi",
           pathseq_host_img=f"{pathseq_db}/pathseq_host.fa.img",
           pathseq_host_dict=f"{pathseq_db}/pathseq_host.dict",
           pathseq_fai=f"{pathseq_db}/pathseq_microbe.fa.fai",
           pathseq_fa=f"{pathseq_db}/pathseq_microbe.fa",
           pathseq_img=f"{pathseq_db}/pathseq_microbe.fa.img",
           pathseq_dict=f"{pathseq_db}/pathseq_microbe.dict",
           pathseq_tax=f"{pathseq_db}/pathseq_taxonomy.db",
           kraken2_tax=f"{kraken_db_path}/taxo.k2d",
           kraken2_names=f"{kraken_db_path}/taxonomy/names.dmp",
           kraken2_nodes=f"{kraken_db_path}/taxonomy/nodes.dmp",
           kraken2_univec=f"{kraken_db_path}/library/UniVec_Core/library.fna",
           kraken2_human=f"{kraken_db_path}/library/human/library.fna",
           kraken2_viral=f"{kraken_db_path}/library/viral/library.fna",
           kraken2_bacteria=f"{kraken_db_path}/library/bacteria/library.fna",
           kraken2_archea=f"{kraken_db_path}/library/archaea/library.fna",
           bracken=f"{kraken_db_path}/database{read_len}mers.kmer_distrib",
           ganon_dl=f"{ganon_db_path}/refseqCG/assemblies/updated_sequence_accession.txt",
           ganon_filter=f"{ganon_db_path}/refseqCG/refseqCG.filter",
           ganon_fna=f"{ganon_db_path}/refseqCG/refseqCG.fna",
           ganon_names=f"{ganon_db_path}/refseqCG/assemblies/names.dmp",
           ganon_nodes=f"{ganon_db_path}/refseqCG/assemblies/nodes.dmp",
           ganon_merged=f"{ganon_db_path}/refseqCG/assemblies/merged.dmp",
           ganon_seq_info=f"{ganon_db_path}/refseqCG/assemblies/acc_len_taxid.txt",
           ezVIR_index=f"{db_path_ezvir}/EZV0.1-database.rev.2.bt2",
           ezVIR_len=f"{db_path_ezvir}/genome_lengths.csv",
           ezVIR_names=f"{db_path_ezvir}/genome_names.csv",
           ezVIR_taxids=f"{db_path_ezvir}/genome_taxids.csv",
           ezVIR_colours=f"{db_path_ezvir}/colours.csv"



rank=config["target_rank"]
community=config['community_name']
tools=sorted(config["tool_list"])
vir_threshold=config["vir_reads_threshold"]
bac_threshold=config["bac_reads_threshold"]

#generate all tools taxonomy tables
rule all_tax:
    input: merged_tsv=expand("taxonomy-tables/{tool}/all_{tool}.tsv",tool=tools)

#generate all tools outputs without a gold standard
rule all_vir_out:
    input: merged_tsv=expand("taxonomy-tables/{tool}/all_{tool}.tsv",tool=tools),
           vir_heatmap_per_sample=expand("plots/heatmaps/{tool}/viruses/{rank}_level.pdf",rank=rank,tool=tools),
           barplots=expand("plots/barplots/all_tools/{superkingdom}/{variable}_{rank}_level.pdf",rank=rank,superkingdom='viruses',variable=['tools','samples']),
           vir_heatmap_counts=expand("plots/heatmaps/all_tools/{superkingdom}/counts_{threshold}_{rank}_level.pdf",rank=rank,superkingdom='viruses',threshold=vir_threshold),
           heatmap_presence=expand("plots/heatmaps/all_tools/{superkingdom}/presence_{rank}_level.pdf",rank=rank,superkingdom='viruses'),
           tab="compare_tools/resources_usage/resources.tsv",
           memo="compare_tools/resources_usage/memory.pdf",
           time="compare_tools/resources_usage/time.pdf",
           mem_and_time="compare_tools/resources_usage/mem-time.pdf"


rule all_bac_out:
    input: merged_tsv=expand("taxonomy-tables/{tool}/all_{tool}.tsv",tool=tools),
           bac_heatmap_per_sample=expand("plots/heatmaps/{tool}/bacteria/{rank}_level.pdf",rank=rank,tool=tools),
           barplots=expand("plots/barplots/all_tools/{superkingdom}/{variable}_{rank}_level.pdf",rank=rank,superkingdom='bacteria',variable=['tools','samples']),
           bac_heatmap_counts=expand("plots/heatmaps/all_tools/{superkingdom}/counts_{threshold}_{rank}_level.pdf",rank=rank,superkingdom='bacteria',threshold=bac_threshold),
           heatmap_presence=expand("plots/heatmaps/all_tools/{superkingdom}/presence_{rank}_level.pdf",rank=rank,superkingdom='bacteria'),
           tab="compare_tools/resources_usage/resources.tsv",
           memo="compare_tools/resources_usage/memory.pdf",
           time="compare_tools/resources_usage/time.pdf",
           mem_and_time="compare_tools/resources_usage/mem-time.pdf"

#generate all benchmarks compared to a gold standard
rule all_vir_benchmark:
    input:  merged_tsv=expand("taxonomy-tables/{tool}/all_{tool}.tsv",tool=tools),
            vir_read_counts_heatmaps=expand("plots/heatmaps/{tool}/viruses/{rank}_level.pdf",rank=rank,tool=tools),
            bac_read_counts_heatmaps=expand("plots/heatmaps/{tool}/bacteria/{rank}_level.pdf",rank=rank,tool=tools),
            gold_standard=f"gold_standard/gs_{community}.tsv",
            all_vir_scores=f"compare_tools/{community}/classification/stats/all_tools/{vir_threshold}_vir_scores_{rank}_level.tsv",
            all_vir_presence=f"compare_tools/{community}/classification/stats/all_tools/{vir_threshold}_vir_presence_{rank}_level.tsv",
            vir_presence_heatmap=f"compare_tools/{community}/classification/heatmaps/all_tools/{vir_threshold}_virus_{rank}_level.pdf",
            pr_curve=f"compare_tools/{community}/classification/plots/all_tools/{rank}_precision-recall-viruses.pdf",
            f1_curve=f"compare_tools/{community}/classification/plots/all_tools/{rank}_f1-viruses.pdf",
            curve_table=f"compare_tools/{community}/classification/plots/all_tools/{rank}_precision-recall-viruses.tsv",
            table=f"compare_tools/{community}/classification/stats/all_tools/{rank}_optimal-params-viruses.tsv",
            l1_distance=f"compare_tools/{community}/classification/plots/all_tools/{rank}_l1-distance-viruses.pdf",
            l1_dist_table=f"compare_tools/{community}/classification/plots/all_tools/{rank}_l1-distance-viruses.tsv",
            barplots=expand("compare_tools/{community}/classification/plots/{tool}/viruses-barplot_{rank}_level.pdf",community=community,tool=tools,rank=rank),
            all_barplots=f"compare_tools/{community}/classification/plots/all_tools/{rank}_barplot-viruses.pdf",
            table_reads=f"compare_tools/{community}/classification/plots/all_tools/classified-viruses.tsv",
            barplot_reads=f"compare_tools/{community}/classification/plots/all_tools/classified-viruses.pdf",
            tab="compare_tools/resources_usage/resources.tsv",
            memo="compare_tools/resources_usage/memory.pdf",
            time="compare_tools/resources_usage/time.pdf",
            mem_and_time="compare_tools/resources_usage/mem-time.pdf"


rule all_bac_benchmark:
    input:  merged_tsv=expand("taxonomy-tables/{tool}/all_{tool}.tsv",tool=tools),
            bac_read_counts_heatmaps=expand("plots/heatmaps/{tool}/bacteria/{rank}_level.pdf",rank=rank,tool=tools),
            gold_standard=f"gold_standard/gs_{community}.tsv",
            all_bac_scores=f"compare_tools/{community}/classification/stats/all_tools/{bac_threshold}_bac_scores_{rank}_level.tsv",
            all_bac_presence=f"compare_tools/{community}/classification/stats/all_tools/{bac_threshold}_bac_presence_{rank}_level.tsv",
            bac_presence_heatmap=f"compare_tools/{community}/classification/heatmaps/all_tools/{bac_threshold}_bacteria_{rank}_level.pdf",
            pr_curve=f"compare_tools/{community}/classification/plots/all_tools/{rank}_precision-recall-bacteria.pdf",
            f1_curve=f"compare_tools/{community}/classification/plots/all_tools/{rank}_f1-bacteria.pdf",
            curve_table=f"compare_tools/{community}/classification/plots/all_tools/{rank}_precision-recall-bacteria.tsv",
            table=f"compare_tools/{community}/classification/stats/all_tools/{rank}_optimal-params-bacteria.tsv",
            l1_distance=f"compare_tools/{community}/classification/plots/all_tools/{rank}_l1-distance-bacteria.pdf",
            l1_dist_table=f"compare_tools/{community}/classification/plots/all_tools/{rank}_l1-distance-bacteria.tsv",
            barplots=expand("compare_tools/{community}/classification/plots/{tool}/bacteria-barplot_{rank}_level.pdf",community=community,tool=tools,rank=rank),
            all_barplots=f"compare_tools/{community}/classification/plots/all_tools/{rank}_barplot-bacteria.pdf",
            tab="compare_tools/resources_usage/resources.tsv",
            memo="compare_tools/resources_usage/memory.pdf",
            time="compare_tools/resources_usage/time.pdf",
            mem_and_time="compare_tools/resources_usage/mem-time.pdf"



rule merge_Kraken2_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("kraken2/{sample}/report.txt",sample=list(read_naming.keys()))

    output: "taxonomy-tables/kraken2/all_kraken2.tsv"

    params: NCBI_email=config['email'],
            NCBI_key=config['api_key']

    script: "scripts/kraken2-merge.py"

rule merge_Kraken2X_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("kraken2x/{sample}/report.txt",sample=list(read_naming.keys()))

    output: "taxonomy-tables/kraken2x/all_kraken2x.tsv"

    params: NCBI_email=config['email'],
            NCBI_key=config['api_key']

    script: "scripts/kraken2-merge.py"


rule merge_Bracken_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("kraken2/{sample}/bracken.txt",sample=list(read_naming.keys()))

    output: "taxonomy-tables/bracken/all_bracken.tsv"

    script: "scripts/bracken-merge.py"


rule correct_Pathseq_counts:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: "Pathseq/{sample}/output/scores.txt"

    output: "Pathseq/{sample}/output/correct-scores.txt"

    script: "scripts/pathseq-correct-counts.py"


rule merge_Pathseq_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("Pathseq/{sample}/output/correct-scores.txt",sample=list(read_naming.keys()))

    output: "taxonomy-tables/pathseq/all_pathseq.tsv"

    script: "scripts/pathseq-merge.py"

rule merge_kaiju_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("kaiju/{sample}/summary.tsv",sample=list(read_naming.keys()))

    output: "taxonomy-tables/kaiju/all_kaiju.tsv"

    log: logging_folder + f"compare_tools/{community}/classification/kaiju.log"

    script: "scripts/kaiju-merge.py"

rule merge_SURPI_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: bac=expand("SURPI/{sample}/OUTPUT_{sample}/{sample}.NT.snap.matched.d1.fl.Bacteria.annotated.species.clx.counttable",sample=list(read_naming.keys())),
           vir=expand("SURPI/{sample}/OUTPUT_{sample}/{sample}.NT.snap.matched.d16.fl.Viruses.filt.NTblastn_tru.dust.annotated.species.clx.counttable",sample=list(read_naming.keys()))
            #dust.annotated file because low complexity regions are substracted

    output: "taxonomy-tables/surpi/all_surpi.tsv"

    log: logging_folder + f"compare_tools/{community}/classification/surpi.log"

    script: "scripts/surpi-merge.py"

ezvir_db=config["ezvir_database"]
rule merge_ezvir_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: hits=expand("Ezvir/{sample}/report/ALL-RESULTS.ezv",sample=list(read_naming.keys()))


    output: "taxonomy-tables/ezvir/all_ezvir.tsv"

    params: read_len=config["samples_read_length"],
            gen_taxids=f'{ezvir_db}/genome_taxids.csv'

    script: "scripts/Ezvir-merge.py"


rule merge_ganon_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("ganon/{sample}/classified.rep",sample=list(read_naming.keys()))

    output: "taxonomy-tables/ganon/all_ganon.tsv"

    params: NCBI_email=config['email'],
            NCBI_key=config['api_key']

    script: "scripts/ganon-merge.py"


rule merge_centrifuge_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("centrifuge/{sample}/centrifuge-k-report.txt",sample=list(read_naming.keys()))

    output: "taxonomy-tables/centrifuge/all_centrifuge.tsv"

    params: NCBI_email=config['email'],
            NCBI_key=config['api_key']
    
    script: "scripts/kraken2-merge.py"



rule virus_read_count_heatmaps:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: f"taxonomy-tables/{{tool}}/all_{{tool}}.tsv"

    output: f"plots/heatmaps/{{tool}}/viruses/{rank}_level.pdf"

    params: rank=config["target_rank"],
            value=config["target_value"],
            superkingdom="Viruses"

    script: "scripts/heatmap-read-counts.py"

rule bacteria_read_count_heatmaps:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: f"taxonomy-tables/{{tool}}/all_{{tool}}.tsv"

    output: f"plots/heatmaps/{{tool}}/bacteria/{rank}_level.pdf"

    params: rank=config["target_rank"],
            value=config["target_value"],
            superkingdom="Bacteria"

    script: "scripts/heatmap-read-counts.py"



rule visualize_viruses_tools_output:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("taxonomy-tables/{tool}/{sample}.tsv",tool=tools,sample=list(read_naming.keys()))

    output: barplot_samples=f"plots/barplots/all_tools/viruses/samples_{rank}_level.pdf",
            barplot_tools=f"plots/barplots/all_tools/viruses/tools_{rank}_level.pdf",
            heatmap_counts=f"plots/heatmaps/all_tools/viruses/counts_{vir_threshold}_{rank}_level.pdf",
            heatmap_presence=f"plots/heatmaps/all_tools/viruses/presence_{rank}_level.pdf"

    params: rank=config["target_rank"],
            value=config["target_value"],
            superkingdom="Viruses",
            threshold=vir_threshold

    script: "scripts/visualize-tool-output.py"


rule visualize_bacteria_tools_output:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("taxonomy-tables/{tool}/{sample}.tsv",tool=tools,sample=list(read_naming.keys()))

    output: barplot_samples=f"plots/barplots/all_tools/bacteria/samples_{rank}_level.pdf",
            barplot_tools=f"plots/barplots/all_tools/bacteria/tools_{rank}_level.pdf",
            heatmap_counts=f"plots/heatmaps/all_tools/bacteria/counts_{bac_threshold}_{rank}_level.pdf",
            heatmap_presence=f"plots/heatmaps/all_tools/bacteria/presence_{rank}_level.pdf"

    params: rank=config["target_rank"],
            value=config["target_value"],
            superkingdom="Bacteria",
            threshold=bac_threshold

    script: "scripts/visualize-tool-output.py"


rule visualize_resource_usage:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("compare_tools/resources_usage/{sample}/{tool}.benchmark.txt",sample=list(read_naming.keys()),tool=tools)

    output: tab="compare_tools/resources_usage/resources.tsv",
            memo="compare_tools/resources_usage/memory.pdf",
            time="compare_tools/resources_usage/time.pdf",
            mem_and_time="compare_tools/resources_usage/mem-time.pdf"

    script: "scripts/resources-usage.py"

rule genereate_gold_standard_profile:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: f"gold_standard/{community}.tsv"

    output: f"gold_standard/gs_{community}.tsv"

    params: community=community

    script: "scripts/gold-standard-tax.py"



rule calculate_precision_recall_f1_score_viruses:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: gold_standard=f"gold_standard/gs_{community}.tsv",
            tool_out=f"taxonomy-tables/{{tool}}/all_{{tool}}.tsv"

    output: scores=f"compare_tools/{community}/classification/stats/{{tool}}/{vir_threshold}_vir_scores_{rank}_level.tsv",
            presence=f"compare_tools/{community}/classification/stats/{{tool}}/{vir_threshold}_vir_presence_{rank}_level.tsv"

    params: threshold=vir_threshold,
            superkingdom="Viruses"

    script: "scripts/stats.py"



rule calculate_precision_recall_f1_score_bacteria:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: gold_standard=f"gold_standard/gs_{community}.tsv",
            tool_out=f"taxonomy-tables/{{tool}}/all_{{tool}}.tsv"

    output: scores=f"compare_tools/{community}/classification/stats/{{tool}}/{bac_threshold}_bac_scores_{rank}_level.tsv",
            presence=f"compare_tools/{community}/classification/stats/{{tool}}/{bac_threshold}_bac_presence_{rank}_level.tsv"

    params: threshold=bac_threshold,
            superkingdom="Bacteria"

    script: "scripts/stats.py"



rule regroup_scores_and_presence_viruses:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: scores=expand("compare_tools/{community}/classification/stats/{tool}/{vir_threshold}_vir_scores_{rank}_level.tsv",community=community,tool=tools,rank=rank,vir_threshold=vir_threshold),
           presence=expand("compare_tools/{community}/classification/stats/{tool}/{vir_threshold}_vir_presence_{rank}_level.tsv",community=community,tool=tools,rank=rank,vir_threshold=vir_threshold),

    output: all_scores=f"compare_tools/{community}/classification/stats/all_tools/{vir_threshold}_vir_scores_{rank}_level.tsv",
            all_presence=f"compare_tools/{community}/classification/stats/all_tools/{vir_threshold}_vir_presence_{rank}_level.tsv"

    script: "scripts/concat.py"


rule regroup_scores_and_presence_bacteria:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: scores=expand("compare_tools/{community}/classification/stats/{tool}/{bac_threshold}_bac_scores_{rank}_level.tsv",community=community,tool=tools,rank=rank,bac_threshold=bac_threshold),
           presence=expand("compare_tools/{community}/classification/stats/{tool}/{bac_threshold}_bac_presence_{rank}_level.tsv",community=community,tool=tools,rank=rank,bac_threshold=bac_threshold)

    output: all_scores=f"compare_tools/{community}/classification/stats/all_tools/{bac_threshold}_bac_scores_{rank}_level.tsv",
            all_presence=f"compare_tools/{community}/classification/stats/all_tools/{bac_threshold}_bac_presence_{rank}_level.tsv"

    script: "scripts/concat.py"


rule bacteria_presence_heatmap:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: f"compare_tools/{community}/classification/stats/all_tools/{bac_threshold}_bac_presence_{rank}_level.tsv"

    output: f"compare_tools/{community}/classification/heatmaps/all_tools/{bac_threshold}_bacteria_{rank}_level.pdf"

    params: rank=config["target_rank"]

    script: "scripts/heatmap-presence.py"


rule virus_presence_heatmap:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: f"compare_tools/{community}/classification/stats/all_tools/{vir_threshold}_vir_presence_{rank}_level.tsv"

    output: f"compare_tools/{community}/classification/heatmaps/all_tools/{vir_threshold}_virus_{rank}_level.pdf"

    params: rank=config["target_rank"]

    script: "scripts/heatmap-presence.py"


rule barplot_counts_viruses:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: gold_standard=f"gold_standard/gs_{community}.tsv",
           tool_out=f"taxonomy-tables/{{tool}}/all_{{tool}}.tsv"

    output: f"compare_tools/{community}/classification/plots/{{tool}}/viruses-barplot_{rank}_level.pdf"

    params: rank=config["target_rank"],
            superkingdom='Viruses'

    script: "scripts/barplot.py"



rule all_tools_barplot_counts_viruses:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: gold_standard=f"gold_standard/gs_{community}.tsv",
           tool_out=expand("taxonomy-tables/{tool}/all_{tool}.tsv",tool=tools)

    params: rank=config["target_rank"],
            superkingdom='Viruses'

    output: all_barplots=f"compare_tools/{community}/classification/plots/all_tools/{rank}_barplot-viruses.pdf"

    script: "scripts/multi-barplot.py"


rule l1_distance_viruses:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: gold_standard=f"gold_standard/gs_{community}.tsv",
            all_tools=expand("taxonomy-tables/{tool}/all_{tool}.tsv",tool=tools)

    output: l1_distance=f"compare_tools/{community}/classification/plots/all_tools/{rank}_l1-distance-viruses.pdf",
            l1_dist_table=f"compare_tools/{community}/classification/plots/all_tools/{rank}_l1-distance-viruses.tsv"

    params: rank=rank,
            superkingdom="Viruses"

    script: "scripts/l1-distance.py"


rule precision_recall_f1_curves_viruses:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: gold_standard=f"gold_standard/gs_{community}.tsv",
           all_tools=expand("taxonomy-tables/{tool}/all_{tool}.tsv",tool=tools)

    output: pr_curve=f"compare_tools/{community}/classification/plots/all_tools/{rank}_precision-recall-viruses.pdf",
            f1_curve=f"compare_tools/{community}/classification/plots/all_tools/{rank}_f1-viruses.pdf",
            curve_table=f"compare_tools/{community}/classification/plots/all_tools/{rank}_precision-recall-viruses.tsv",
            raw_table=f"compare_tools/{community}/classification/plots/all_tools/raw-table-viruses.tsv",
            table=f"compare_tools/{community}/classification/stats/all_tools/{rank}_optimal-params-viruses.tsv"

    params: rank=rank,
            superkingdom="Viruses",
            read_step=config["read-step"],
            max_read=config["max-read"]

    script: "scripts/precision-recall.py"


rule barplot_counts_bacteria:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: gold_standard=f"gold_standard/gs_{community}.tsv",
           tool_out=f"taxonomy-tables/{{tool}}/all_{{tool}}.tsv"

    output: f"compare_tools/{community}/classification/plots/{{tool}}/bacteria-barplot_{rank}_level.pdf"

    params: rank=config["target_rank"],
            superkingdom='Bacteria'

    script: "scripts/barplot.py"


rule all_tools_barplot_counts_bacteria:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: gold_standard=f"gold_standard/gs_{community}.tsv",
           tool_out=expand("taxonomy-tables/{tool}/all_{tool}.tsv",tool=tools)

    params: rank=config["target_rank"],
            superkingdom='Bacteria'

    output: all_barplots=f"compare_tools/{community}/classification/plots/all_tools/{rank}_barplot-bacteria.pdf"

    script: "scripts/multi-barplot.py"

rule l1_distance_bacteria:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: gold_standard=f"gold_standard/gs_{community}.tsv",
            all_tools=expand("taxonomy-tables/{tool}/all_{tool}.tsv",tool=tools)

    output: l1_distance=f"compare_tools/{community}/classification/plots/all_tools/{rank}_l1-distance-bacteria.pdf",
            l1_dist_table=f"compare_tools/{community}/classification/plots/all_tools/{rank}_l1-distance-bacteria.tsv"

    params: rank=rank,
            superkingdom="Bacteria"

    script: "scripts/l1-distance.py"


rule precision_recall_curves_bacteria:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: gold_standard=f"gold_standard/gs_{community}.tsv",
           all_tools=expand("taxonomy-tables/{tool}/all_{tool}.tsv",tool=tools)

    output: pr_curve=f"compare_tools/{community}/classification/plots/all_tools/{rank}_precision-recall-bacteria.pdf",
            f1_curve=f"compare_tools/{community}/classification/plots/all_tools/{rank}_f1-bacteria.pdf",
            curve_table=f"compare_tools/{community}/classification/plots/all_tools/{rank}_precision-recall-bacteria.tsv",
            raw_table=f"compare_tools/{community}/classification/plots/all_tools/raw-table-bacteria.tsv",
            table=f"compare_tools/{community}/classification/stats/all_tools/{rank}_optimal-params-bacteria.tsv"

    params: rank=rank,
            superkingdom="Bacteria",
            read_step=10,
            max_read=config["max-read"]

    script: "scripts/precision-recall.py"


rule viral_classified_reads:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: gold_standard=f"gold_standard/gs_{community}.tsv",
           all_tools=expand("taxonomy-tables/{tool}/all_{tool}.tsv",tool=tools)

    output: table=f"compare_tools/{community}/classification/plots/all_tools/classified-viruses.tsv",
            barplot=f"compare_tools/{community}/classification/plots/all_tools/classified-viruses.pdf"

    params: superkingdom="Viruses"

    script: "scripts/classified-reads.py"




if community=='qPCR':

    rule all_PCR:
        input: all_scores=f"compare_tools/{community}/classification/stats/all_tools/{vir_threshold}_PCR_vir_scores.tsv",
                all_presence=f"compare_tools/{community}/classification/stats/all_tools/{vir_threshold}_PCR_vir_presence.tsv"

    rule precision_recall_vs_qPCR_viruses:
        conda: pipeline_path + "envs/compare-tools.yml"

        input: gold_standard=f"gold_standard/gs_{community}.tsv",
                tool_out=f"taxonomy-tables/{{tool}}/all_{{tool}}.tsv"

        output: scores=f"compare_tools/{community}/classification/stats/{{tool}}/{vir_threshold}_PCR_vir_scores.tsv",
                presence=f"compare_tools/{community}/classification/stats/{{tool}}/{vir_threshold}_PCR_vir_presence.tsv"

        params: threshold=vir_threshold,
                superkingdom="Viruses"

        script: "scripts/qPCR.py"

    rule concat_qPCR_results:
        conda: pipeline_path + "envs/compare-tools.yml"

        input: scores=expand("compare_tools/{community}/classification/stats/{tool}/{vir_threshold}_PCR_vir_scores.tsv",community=community,tool=tools,vir_threshold=vir_threshold),
               presence=expand("compare_tools/{community}/classification/stats/{tool}/{vir_threshold}_PCR_vir_presence.tsv",community=community,tool=tools,vir_threshold=vir_threshold)

        output: all_scores=f"compare_tools/{community}/classification/stats/all_tools/{vir_threshold}_PCR_vir_scores.tsv",
                all_presence=f"compare_tools/{community}/classification/stats/all_tools/{vir_threshold}_PCR_vir_presence.tsv"

        script: "scripts/concat.py"
