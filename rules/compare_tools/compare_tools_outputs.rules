rank=config["target_rank"]
community=config['community_name']
rule all_tools_output:
    input:  merged_tsv=expand("benchmarks/{community}/classification/tables/{tool}/all_{tool}.tsv",community=community,tool=['kraken2','bracken','pathseq','kaiju','surpi','ezvir','ganon']),
            vir_read_counts_heatmaps=expand("benchmarks/{community}/classification/heatmaps/{tool}/viruses_{rank}_level.pdf",community=community,rank=rank,tool=['kraken2','bracken','pathseq','kaiju','surpi','ezvir','ganon']),
            bac_read_counts_heatmaps=expand("benchmarks/{community}/classification/heatmaps/{tool}/bacteria_{rank}_level.pdf",community=community,rank=rank,tool=['kraken2','bracken','pathseq','kaiju','surpi','ezvir','ganon']),
            gold_standard=f"gold_standard/tables/gs_{community}.tsv",
            all_vir_scores=f"benchmarks/{community}/classification/stats/all_tools/vir_scores_{rank}_level.tsv",
            all_vir_presence=f"benchmarks/{community}/classification/stats/all_tools/vir_presence_{rank}_level.tsv",
            all_bac_scores=f"benchmarks/{community}/classification/stats/all_tools/bac_scores_{rank}_level.tsv",
            all_bac_presence=f"benchmarks/{community}/classification/stats/all_tools/bac_presence_{rank}_level.tsv",
            vir_presence_heatmap=f"benchmarks/{community}/classification/heatmaps/all_tools/virus_{rank}_level.pdf",
            bac_presence_heatmap=f"benchmarks/{community}/classification/heatmaps/all_tools/bacteria_{rank}_level.pdf",
            barplot=expand("benchmarks/{community}/classification/plots/{tool}/barplot_{rank}_level.pdf",community=community,tool=['kraken2','bracken','pathseq','kaiju','surpi','ezvir','ganon'],rank=rank)

rule merge_Kraken2_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("kraken2/{sample}/report.txt",sample=list(read_naming.keys()))

    output: f"benchmarks/{community}/classification/tables/kraken2/all_kraken2.tsv"

    script: "scripts/kraken2-merge.py"

rule merge_Bracken_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("kraken2/{sample}/bracken.txt",sample=list(read_naming.keys()))

    output: f"benchmarks/{community}/classification/tables/bracken/all_bracken.tsv"

    script: "scripts/bracken-merge.py"

rule merge_Pathseq_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("Pathseq/{sample}/output/scores.txt",sample=list(read_naming.keys()))

    output: f"benchmarks/{community}/classification/tables/pathseq/all_pathseq.tsv"

    script: "scripts/pathseq-merge.py"

rule merge_kaiju_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("kaiju/{sample}/summary.tsv",sample=list(read_naming.keys()))

    output: f"benchmarks/{community}/classification/tables/kaiju/all_kaiju.tsv"

    log: logging_folder + f"benchmarks/{community}/classification/kaiju.log"

    script: "scripts/kaiju-merge.py"

rule merge_SURPI_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: bac=expand("SURPI/{sample}/OUTPUT_{sample}/{sample}.NT.snap.matched.d1.fl.Bacteria.annotated.species.clx.counttable",sample=list(read_naming.keys())),
           vir=expand("SURPI/{sample}/OUTPUT_{sample}/{sample}.NT.snap.matched.d16.fl.Viruses.filt.NTblastn_tru.dust.annotated.species.clx.counttable",sample=list(read_naming.keys()))
            #dust.annotated file because low complexity regions are substracted

    output: f"benchmarks/{community}/classification/tables/surpi/all_surpi.tsv"

    log: logging_folder + f"benchmarks/{community}/classification/surpi.log"

    script: "scripts/surpi-merge.py"


rule merge_ezvir_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: expand("Ezvir/{sample}/report/ALL-RESULTS.ezv",sample=list(read_naming.keys()))

    output: f"benchmarks/{community}/classification/tables/ezvir/all_ezvir.tsv"

    params: read_len=config["samples_read_length"]

    script: "scripts/Ezvir-merge.py"


rule merge_ganon_outputs:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: vir=expand("ganon/{sample}/viruses/classified.rep",sample=list(read_naming.keys())),
           bac=expand("ganon/{sample}/bacteria/classified.rep",sample=list(read_naming.keys()))

    output: f"benchmarks/{community}/classification/tables/ganon/all_ganon.tsv"

    script: "scripts/ganon-merge.py"


rule virus_read_count_heatmaps:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: f"benchmarks/{community}/classification/tables/{{tool}}/all_{{tool}}.tsv"

    output: f"benchmarks/{community}/classification/heatmaps/{{tool}}/viruses_{rank}_level.pdf"

    params: rank=config["target_rank"],
            value=config["target_value"],
            superkingdom="Viruses"

    script: "scripts/heatmap-read-counts.py"

rule bacteria_read_count_heatmaps:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: f"benchmarks/{community}/classification/tables/{{tool}}/all_{{tool}}.tsv"

    output: f"benchmarks/{community}/classification/heatmaps/{{tool}}/bacteria_{rank}_level.pdf"

    params: rank=config["target_rank"],
            value=config["target_value"],
            superkingdom="Bacteria"

    script: "scripts/heatmap-read-counts.py"


rule genereate_gold_standard_profile:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: f"gold_standard/tables/{community}.tsv"

    output: f"gold_standard/tables/gs_{community}.tsv"

    script: "scripts/profile.py"



rule calculate_precision_recall_f1_score:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: gold_standard=f"gold_standard/tables/gs_{community}.tsv",
            tool_out=f"benchmarks/{community}/classification/tables/{{tool}}/all_{{tool}}.tsv"

    output: vir_scores=f"benchmarks/{community}/classification/stats/{{tool}}/vir_scores_{rank}_level.tsv",
            vir_presence=f"benchmarks/{community}/classification/stats/{{tool}}/vir_presence_{rank}_level.tsv",
            bac_scores=f"benchmarks/{community}/classification/stats/{{tool}}/bac_scores_{rank}_level.tsv",
            bac_presence=f"benchmarks/{community}/classification/stats/{{tool}}/bac_presence_{rank}_level.tsv"

    script: "scripts/stats.py"


rule regroup_scores_and_presence:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: vir_scores=expand("benchmarks/{community}/classification/stats/{tool}/vir_scores_{rank}_level.tsv",community=community,tool=['kraken2','bracken','pathseq','kaiju','surpi','ezvir','ganon'],rank=rank),
           vir_presence=expand("benchmarks/{community}/classification/stats/{tool}/vir_presence_{rank}_level.tsv",community=community,tool=['kraken2','bracken','pathseq','kaiju','surpi','ezvir','ganon'],rank=rank),
           bac_scores=expand("benchmarks/{community}/classification/stats/{tool}/bac_scores_{rank}_level.tsv",community=community,tool=['kraken2','bracken','pathseq','kaiju','surpi','ezvir','ganon'],rank=rank),
           bac_presence=expand("benchmarks/{community}/classification/stats/{tool}/bac_presence_{rank}_level.tsv",community=community,tool=['kraken2','bracken','pathseq','kaiju','surpi','ezvir','ganon'],rank=rank)

    output: all_vir_scores=f"benchmarks/{community}/classification/stats/all_tools/vir_scores_{rank}_level.tsv",
            all_vir_presence=f"benchmarks/{community}/classification/stats/all_tools/vir_presence_{rank}_level.tsv",
            all_bac_scores=f"benchmarks/{community}/classification/stats/all_tools/bac_scores_{rank}_level.tsv",
            all_bac_presence=f"benchmarks/{community}/classification/stats/all_tools/bac_presence_{rank}_level.tsv"

    script: "scripts/concat.py"


rule bacteria_presence_hetamap:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: f"benchmarks/{community}/classification/stats/all_tools/bac_presence_{rank}_level.tsv"

    output: f"benchmarks/{community}/classification/heatmaps/all_tools/bacteria_{rank}_level.pdf"

    params: rank=config["target_rank"]

    script: "scripts/heatmap-presence.py"

rule virus_presence_hetamap:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: f"benchmarks/{community}/classification/stats/all_tools/vir_presence_{rank}_level.tsv"

    output: f"benchmarks/{community}/classification/heatmaps/all_tools/virus_{rank}_level.pdf"

    params: rank=config["target_rank"]

    script: "scripts/heatmap-presence.py"

rule generate_barplot_counts:
    conda: pipeline_path + "envs/compare-tools.yml"

    input: gold_standard=f"gold_standard/tables/gs_{community}.tsv",
           tool_out=f"benchmarks/{community}/classification/tables/{{tool}}/all_{{tool}}.tsv"

    params: rank=config["target_rank"]

    output: f"benchmarks/{community}/classification/plots/{{tool}}/barplot_{rank}_level.pdf"

    script: "scripts/barplot.py"