
rule all_decontam:
    input: expand("unmapped/{host_acc}/{sample}_R{rp}.fq",rp=['1','2'],sample=list(read_naming.keys()),host_acc=config['reference_genome']['filename'])

rule decompress_host_genome:
    input: "host/{host_acc}.fna.gz"

    output: temp("host/{host_acc}.fa")

    shell: "zcat {input} > {output}"

if config['reference_genome']['host']=='human':
    index_alg='bwtsw'
else:
    index_alg='is'
rule index_host_genome:
    conda: pipeline_path + "envs/bwa-samtools.yml"

    input: "host/{host_acc}.fa"

    output: "host/{host_acc}.fa.amb","host/{host_acc}.fa.pac","host/{host_acc}.fa.ann",
            "host/{host_acc}.fa.bwt","host/{host_acc}.fa.sa"

    params: algorithm=index_alg,
            mem=config["indexing_mem"]

    shell: "bwa index -b {params.mem} -a {params.algorithm} {input}"

rule map_PE_reads_to_host_genome:
    conda: pipeline_path + "envs/bwa-samtools.yml"

    input: r1="samples/{sample}/reads/trimmed/R1_paired.fastq",
            r2="samples/{sample}/reads/trimmed/R2_paired.fastq",
            host_fa="host/{host_acc}.fa"

    output: temp("host/{host_acc}/PE_{sample}.bam")

    threads: config["num_cores"]

    log: logging_folder + "host-filtering/{host_acc}/alignment-{sample}.log"

    shell:
        """
        bwa mem -M -t {threads} {input.host_fa} {input.r1} {input.r2} 2>> {log} | samtools sort -@ {threads} -n -O BAM -o {output} 2>> {log}
        """

rule map_SE_reads_to_host_genome:
    conda: pipeline_path + "envs/bwa-samtools.yml"

    input: r1="samples/{sample}/reads/trimmed/single.fastq",
            host_fa="host/{host_acc}.fa"

    output: temp("host/{host_acc}/SE_{sample}.bam")

    threads: config["num_cores"]

    log: logging_folder + "host-filtering/{host_acc}/alignment-{sample}.log"

    shell:
        """
        bwa mem -M -t {threads} {input.host_fa} {input.r1} 2>> {log} | samtools sort -@ {threads} -n -O BAM -o {output} 2>> {log}
        """


def get_bam_input_decontam(wildcards):
    fastq_list = read_naming[wildcards.sample]
    if len(fastq_list) == 2:
        return "host/{host_acc}/PE_{sample}.bam"
    else:
        return "host/{host_acc}/SE_{sample}.bam"


rule get_unmapped_reads:
    conda: pipeline_path + "envs/bwa-samtools.yml"

    input: get_bam_input_decontam

    output: "unmapped/{host_acc}/{sample}.bam"

    threads: 30

    shell: "samtools view -@ {threads} -b -f 4 {input} > {output}"



rule decontaminated_PE_bam_to_fastq:
    conda: pipeline_path + "envs/bedtools.yml"

    input: "unmapped/{host_acc}/{sample}.bam"

    output: "unmapped/{host_acc}/{sample}_R1.fq",
            "unmapped/{host_acc}/{sample}_R2.fq"

    log: logging_folder + "host-filtering/{host_acc}/bam-to-fq-{sample}.log"

    shell: "bedtools bamtofastq -i {input} -fq {output[0]} -fq2 {output[1]} &>> {log}"

rule decontaminated_SE_bam_to_fastq:
    conda: pipeline_path + "envs/bedtools.yml"

    input: "unmapped/{host_acc}/{sample}.bam"

    output: "unmapped/{host_acc}/{sample}_single.fq"

    log: logging_folder + "host-filtering/{host_acc}/bam-to-fq-{sample}.log"

    shell: "bedtools bamtofastq -i {input} -fq {output} &>> {log}"


rule all_deconatam_with_Pathseq:
    input: expand("Pathseq/{sample}/filtered_reads/filter_metrics.txt",sample=list(read_naming.keys()))

rule raw_paired_fastq_to_bam:
    singularity: "docker://broadinstitute/gatk:4.1.3.0"

    input: "samples/{sample}/reads/raw/{sample}_R1.fastq.gz",
           "samples/{sample}/reads/raw/{sample}_R2.fastq.gz"

    log: logging_folder+"Pathseq/filtered/{sample}/FastqToSam.log"

    output: "Pathseq/filtered/{sample}/PE_input_reads.bam"

    shell: "gatk FastqToSam -F1 {input[0]} -F2 {input[1]} -O {output} -SM {wildcards.sample} 2> {log}"

rule raw_single_fastq_to_bam:
    singularity: "docker://broadinstitute/gatk:4.1.3.0"

    input: "samples/{sample}/reads/raw/single_{sample}.fastq.gz"

    log: logging_folder+"Pathseq/filtered/{sample}/FastqToSam.log"

    output: "Pathseq/filtered/{sample}/SE_input_reads.bam"

    shell: "gatk FastqToSam -F1 {input[0]} -O {output} -SM {wildcards.sample} 2> {log}"

def get_bam_input_pathseq(wildcards):
    fastq_list = read_naming[wildcards.sample]
    if len(fastq_list) == 2:
        return "Pathseq/filtered/{sample}/PE_input_reads.bam"
    else:
        return "Pathseq/filtered/{sample}/SE_input_reads.bam"

db_path=config["pathseq_database"]

rule filter_reads:
    singularity: "docker://broadinstitute/gatk:4.1.3.0"

    input: get_bam_input_pathseq

    output: paired_reads="Pathseq/{sample}/filtered_reads/Paired_reads.bam",
            unpaired_reads="Pathseq/{sample}/filtered_reads/Unpaired_reads.bam",
            filter_met="Pathseq/{sample}/filtered_reads/filter_metrics.txt"

    params: min_clip_len=config["min_clip_len"],
            host_kmer=f"{db_path}/pathseq_host.bfi",
            host_bwa=f"{db_path}/pathseq_host.fa.img"

    threads: 15

    log: logging_folder + "Pathseq/filtered/{sample}.log"
    shell:
        """     
         gatk PathSeqFilterSpark  \
           --input {input} \
           --paired-output {output.paired_reads} \
           --unpaired-output {output.unpaired_reads} \
           --min-clipped-read-length {params.min_clip_len} \
           --kmer-file {params.host_kmer} \
           --filter-bwa-image {params.host_bwa} \
           --filter-metrics {output.filter_met} \
           --bam-partition-size 4000000 2> {log} \
        """

